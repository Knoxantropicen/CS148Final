// #define NUM_PARTICLES		1024*1024
// #define WORK_GROUP_SIZE		128

// struct pos {
// 	float x, y, z ,w;		// position
// }

// struct vel {
// 	float vx, vy, vz, vw;	// velocity
// }

// struct col {
// 	float r, g, b, a;		// color
// }

// GLuint posSSbo, velSSbo, colSSbo;
// GLint bufMask = GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT;

// // position
// glGenbuffers(1, &posSSbo);
// glBindbuffer(GL_SHADER_STORAGE_BUFFER, posSSbo);
// glBufferData(GL_SHADER_STORAGE_BUFFER, NUM_PARTICLES * sizeof(struct pos), NULL, GL_STATIC_DRAW);

// struct pos * points = (struct pos *) glMapBufferRange(GL_SHADER_STORAGE_BUFFER, 0, NUM_PARTICLES * sizeof(struct pos), bufMask);
// for (int i = 0; i < NUM_PARTICLES; ++i) {
// 	points[i].x = Ranf(XMIN, XMAX);
// 	points[i].y = Ranf(YMIN, YMAX);
// 	points[i].z = Ranf(ZMIN, ZMAX);
// 	points[i].w = 1;
// }
// glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);

// // velocity
// glGenbuffers(1, &velSSbo);
// glBindbuffer(GL_SHADER_STORAGE_BUFFER, velSSbo);
// glBufferData(GL_SHADER_STORAGE_BUFFER, NUM_PARTICLES * sizeof(struct vel), NULL, GL_STATIC_DRAW);

// struct vel * vels = (struct vel *) glMapBufferRange(GL_SHADER_STORAGE_BUFFER, 0, NUM_PARTICLES * sizeof(struct vel), bufMask);
// for (int i = 0; i < NUM_PARTICLES; ++i) {
// 	vels[i].vx = Ranf(VXMIN, VXMAX);
// 	vels[i].vy = Ranf(VYMIN, VYMAX);
// 	vels[i].vz = Ranf(VZMIN, VZMAX);
// 	vels[i].vw = 0;
// }
// glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);

// // color
// glGenbuffers(1, &colSSbo);
// glBindbuffer(GL_SHADER_STORAGE_BUFFER, colSSbo);
// glBufferData(GL_SHADER_STORAGE_BUFFER, NUM_PARTICLES * sizeof(struct col), NULL, GL_STATIC_DRAW);

// struct col * cols = (struct col *) glMapBufferRange(GL_SHADER_STORAGE_BUFFER, 0, NUM_PARTICLES * sizeof(struct col), bufMask);
// for (int i = 0; i < NUM_PARTICLES; ++i) {
// 	cols[i].r = Ranf(RMIN, RMAX);
// 	cols[i].g = Ranf(RMIN, RMAX);
// 	cols[i].b = Ranf(RMIN, RMAX);
// 	cols[i].a = 1;
// }
// glUnmapBuffer(GL_SHADER_STORAGE_BUFFER);

// // invoke compute shader
// glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 4, posSSbo);
// glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5, velSSbo);
// glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6, colSSbo);


